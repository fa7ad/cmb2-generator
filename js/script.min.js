
/*!
 * @author: Fahad Hossain
 * @date: July 24, 2015 2:00 AM
 * @license: MIT
 */
(function($, Hh, Px) {
  var delConf, dirty, generateCode, prepareCode;
  generateCode = function(data) {
    var code, compiled, template;
    template = 'add_filter("cmb2_meta_boxes", "{{mb_function}}");\nfunction {{mb_function}} (array $meta_boxes) {\n  $meta_boxes["{{mb_id}}"] = array(\n    "id" => "{{mb_id}}",\n    "title" => __("{{mb_title}}", "{{mb_textdomain}}"),\n    "object_types" => array({{&mb_scope}}),\n    "show_on" => array(\n      "key" => "{{mb_so_key}}",\n      "value" => "{{mb_so_value}}"\n    ),\n    "context" => "{{mb_context}}",\n    "priority" => "{{mb_priority}}",\n    "show_names" => true,\n    "fields" => array(\n      {{#fields}}\n      array(\n        "name" => __("{{title}}", "{{textdomain}}"),\n        "id" => "{{id}}",\n        "type" => "{{type}}",\n        "default" => "{{default}}",\n        {{#options_cb}}\n        "options" => "{{callback}}"\n        {{/options_cb}}\n        {{^options_cb}}\n        "options" => array(\n          {{#options}}\n          "{{key}}" => __("{{value}}", "{{textdomain}}"),\n          {{/options}}\n        ),\n        {{/options_cb}}\n      ),\n      {{/fields}}\n    )\n  );\n  return $meta_boxes;\n}';
    compiled = Hh.compile(template);
    code = compiled.render(data);
    $('#code').html("<code class=\"language-php\">" + code + "</code>");
    Px.highlightAll();
    $('#codecontainer').fadeIn();
  };
  prepareCode = function(object) {
    object = {
      mb_function: $('#mb_function').val(),
      mb_id: $('#mb_id').val(),
      mb_title: $('#mb_title').val(),
      mb_textdomain: $('#mb_textdomain').val(),
      mb_scope: $('#mb_scope').val().replace(/\b/g, "'").replace(/\s/g, ""),
      mb_so_key: $('#mb_so_key').val(),
      mb_so_value: $('#mb_so_value').val(),
      mb_context: $('#mb_context').val(),
      mb_priority: $('#mb_priority').val(),
      fields: []
    };
    $('.form-element').each(function() {
      var field, ljQ, optionType, options;
      ljQ = $(this);
      field = {
        textdomain: object.mb_textdomain,
        title: ljQ.find('.mb_field_title').val(),
        id: ljQ.find('.mb_field_id').val(),
        type: ljQ.find('.mb_field_type').val(),
        "default": ljQ.find('.mb_field_default').val()
      };
      if (ljQ.has('.option-param').length) {
        options = ljQ.children('.option-param');
        optionType = options.first().find('.opt-param-type').val();
        if (optionType === "callback") {
          field.options_cb = {
            callback: options.first().find('.opt-callback').val()
          };
          field.options = false;
        } else {
          field.options_cb = false;
          field.options = [];
          options.each(function() {
            var opt, tjQ;
            tjQ = $(this);
            opt = {
              key: tjQ.find('.opt-key').val(),
              value: tjQ.find('.opt-val').val(),
              textdomain: object.mb_textdomain
            };
            field.options.push(opt);
          });
        }
      }
      object.fields.push(field);
    });
    return object;
  };
  dirty = false;
  delConf = {
    title: "You sure, buddy?",
    text: "Once its gone, it ain't coming back...",
    type: "warning",
    showCancelButton: true,
    confirmButtonColor: "#f44336",
    confirmButtonText: "Yes, delete it!",
    closeOnConfirm: true
  };
  $(document).ready(function() {
    $('#fields').trigger('reset').on('click loadTrig', function() {
      if ($('.form-element:visible').length === 1) {
        $('.form-element:first .remove').prop('disabled', true);
      }
    }).trigger('loadTrig').on('click', '.add-more', function(e) {
      dirty = true;
      e.preventDefault();
      $(this).parents('.form-element').find('.remove').prop('disabled', false);
      $(this).parents('.form-element').clone().appendTo('#fields').find('.option-param').remove();
      $(this).parents('.btn-group-lg').removeClass('btn-group');
      $(this).hide();
    }).on('click', '.remove', function(e) {
      e.preventDefault();
      swal(delConf, (function(_this) {
        return function() {
          $(_this).parents('.form-element').remove();
          $('.btn-group-lg').each(function() {
            $(this).addClass('btn-group');
          });
          $('#fields').find('.form-element:last').find('.add-more').show();
          $('.form-element').trigger('loadTrig');
        };
      })(this));
    }).on('click', '.move-up', function(e) {
      var fe, prevfe;
      e.preventDefault();
      fe = $(this).parents('.form-element');
      prevfe = $(fe).prev('.form-element');
      if (prevfe.length > 0) {
        fe.detach();
        fe.insertBefore(prevfe);
        fe.find('.add-more').hide();
        $('#fields').find('.form-element:last').find('.add-more').show();
      }
    }).on('click', '.move-down', function(e) {
      var fe, fields, nextfe;
      e.preventDefault();
      fe = $(this).parents('.form-element');
      nextfe = $(fe).next('.form-element');
      if (nextfe.length > 0) {
        fe.detach();
        fe.insertAfter(nextfe);
        fe.find('.add-more').hide();
        fields = $('#fields');
        fields.find('.form-element').find('.add-more').hide();
        fields.find('.form-element:last').find('.add-more').show();
      }
    }).on('change', '.mb_field_type', function() {
      var dropdown, field_types, form_elem, has_option_elem, html_element, position_in_array, selected_option;
      dropdown = $(this);
      selected_option = dropdown.val();
      form_elem = dropdown.parents('.form-element');
      html_element = $('#option-param-elem').children();
      field_types = ['multicheck', 'multicheck_inline', 'radio', 'radio_inline', 'select'];
      position_in_array = $.inArray(selected_option, field_types);
      has_option_elem = form_elem.has('.option-param').length;
      if (position_in_array >= 0 && !has_option_elem) {
        html_element.clone().appendTo(form_elem);
      } else if (position_in_array < 0 && has_option_elem) {
        form_elem.find('.option-param').remove();
      }
    }).on('change', '.opt-param-type', function() {
      var $this, form_elem;
      $this = $(this);
      form_elem = $this.parents('.form-element');
      form_elem.children('.option-param').not(':first').remove();
      form_elem.find('[data-opt-type]').addClass('hidden');
      form_elem.find("[data-opt-type=\"" + ($this.val()) + "\"]").removeClass('hidden');
    }).on('click', '.opt-move-up', function(e) {
      var current, prev_elem;
      e.preventDefault();
      current = $(this).parents('.option-param');
      prev_elem = current.prev('.option-param');
      if (prev_elem.length) {
        prev_elem.before(current);
      }
    }).on('click', '.opt-move-down', function(e) {
      var current, next_elem;
      e.preventDefault();
      current = $(this).parents('.option-param');
      next_elem = current.next('.option-param');
      if (next_elem.length) {
        next_elem.after(current);
      }
    }).on('click', '.opt-add', function(e) {
      e.preventDefault();
      $('.opt-remove').prop('disabled', false);
      $('#option-param-elem').children().clone().appendTo($(this).parents('.form-element'));
      $(this).parents('.btn-group-sm').removeClass('btn-group');
    }).on('click', '.opt-remove', function(e) {
      e.preventDefault();
      swal(delConf, (function(_this) {
        return function() {
          $(_this).parents('.option-param').remove();
          $('.btn-group-sm').each(function() {
            $(this).addClass('btn-group');
          });
          $('.option-param').trigger('loadTrig');
        };
      })(this));
    }).on('click loadTrig', function() {
      if ($('.option-param:visible').length === 1) {
        $('.option-param').each(function() {
          $(this).find('.opt-remove').prop('disabled', true);
        });
      }
    }).trigger('loadTrig');
    $('.code-generator').on('click', function(e) {
      var elements;
      e.preventDefault();
      elements = prepareCode();
      generateCode(elements);
      dirty = false;
    });
    $(window).on('beforeunload', function() {
      if (dirty) {
        return 'You have a work in progress!';
      }
    });
  });
})(jQuery, Hogan, Prism);
